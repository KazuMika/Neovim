snippet _8
	/*
	 * FileName:     file
	 * Author: 		 8ucchiman
	 * CreatedDate:  2023-02-25 18:25:13 +0900
	 * LastModified: 2023-02-25 18:37:47 +0900
	 * Reference: 	 8ucchiman.jp
	 */

snippet _8callback

	/** @brief Converts an image from one color space to another.

		@param src input image: 8-bit unsigned, 16-bit unsigned ( CV_16UC... ), or single-precision floating-point.
		@param dst output image of the same size and depth as src.
		@param code color space conversion code (see #ColorConversionCodes).
		@param dstCn number of channels in the destination image; if the parameter is 0, the number of the channels is derived automatically from src and code.
	*/
	int func(int (*callback)(int, int, int), int x) {
		return callback(x, x, x);
	}

snippet _8multithread
	/**
		スレッドで処理する関数
		
	*/
	void *thread_func(void* arg) {
		int id = (int)arg;
		for (int i=0; i<5; i++) {
			printf("id = %d, i = %d\n", id, i);
			sleep(1);
		}
		return "finished";
	}

	int main(int argc, char** argv) {
		pthread_t v[10];
		for (int i=0; i<10; i++) {
			if (pthread_create(&v[i], NULL, thread_func, (void*)i) != 0) {
				perror("pthread_create");
				return -1;
			}
		}

		for (int i=0; i<10; i++) {
			char* ptr;

			if (pthread_join(v[i], (void**)&ptr) == 0) {
				printf("msg = %s\n", ptr);
			}
			else {
				perror("pthread_join");
				return -1;
			}
		}
		return 0;
	}

snippet _8struct
	/**
		- typedef不使用
		struct _playersData { };      // 宣言
		struct _playersData player_x;
		- typedef使用
		typedef struct _playersData { }_playersData; // 宣言
		_playersData player_x;
	*/
	typedef struct _playersData {
		char* name;
		int age;
		int position;
		double* RBI;
	}_playersData;

snippet _8file_read
	/**
		


	 */
	void file(char* file_name) {
	    FILE *fp;
	    if ((fp = fopen(file_name, "r")) == NULL) {
			perror("Error: failed to read a file.");
			exit(EXIT_FAILURE);
	    }
	    int l;
	    char** words = (char**) malloc(MAX_WORDS*sizeof(char*));
	
	    while ((l = getc(fp)) != EOF) {
	        char* tmp_char = (char*)malloc(CHAR_LEN*sizeof(char));
	        printf("%c\n", l);
	    }
	    fclose(fp);
	}
